/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SpecialItemGroupRouteImport } from './routes/special-item-group'
import { Route as MobDropItemRouteImport } from './routes/mob-drop-item'
import { Route as GroupGroupRouteImport } from './routes/group-group'
import { Route as GroupRouteImport } from './routes/group'
import { Route as BlendRouteImport } from './routes/blend'
import { Route as IndexRouteImport } from './routes/index'

const SpecialItemGroupRoute = SpecialItemGroupRouteImport.update({
  id: '/special-item-group',
  path: '/special-item-group',
  getParentRoute: () => rootRouteImport,
} as any)
const MobDropItemRoute = MobDropItemRouteImport.update({
  id: '/mob-drop-item',
  path: '/mob-drop-item',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupRoute = GroupGroupRouteImport.update({
  id: '/group-group',
  path: '/group-group',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupRoute = GroupRouteImport.update({
  id: '/group',
  path: '/group',
  getParentRoute: () => rootRouteImport,
} as any)
const BlendRoute = BlendRouteImport.update({
  id: '/blend',
  path: '/blend',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blend': typeof BlendRoute
  '/group': typeof GroupRoute
  '/group-group': typeof GroupGroupRoute
  '/mob-drop-item': typeof MobDropItemRoute
  '/special-item-group': typeof SpecialItemGroupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blend': typeof BlendRoute
  '/group': typeof GroupRoute
  '/group-group': typeof GroupGroupRoute
  '/mob-drop-item': typeof MobDropItemRoute
  '/special-item-group': typeof SpecialItemGroupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blend': typeof BlendRoute
  '/group': typeof GroupRoute
  '/group-group': typeof GroupGroupRoute
  '/mob-drop-item': typeof MobDropItemRoute
  '/special-item-group': typeof SpecialItemGroupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blend'
    | '/group'
    | '/group-group'
    | '/mob-drop-item'
    | '/special-item-group'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blend'
    | '/group'
    | '/group-group'
    | '/mob-drop-item'
    | '/special-item-group'
  id:
    | '__root__'
    | '/'
    | '/blend'
    | '/group'
    | '/group-group'
    | '/mob-drop-item'
    | '/special-item-group'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlendRoute: typeof BlendRoute
  GroupRoute: typeof GroupRoute
  GroupGroupRoute: typeof GroupGroupRoute
  MobDropItemRoute: typeof MobDropItemRoute
  SpecialItemGroupRoute: typeof SpecialItemGroupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/special-item-group': {
      id: '/special-item-group'
      path: '/special-item-group'
      fullPath: '/special-item-group'
      preLoaderRoute: typeof SpecialItemGroupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mob-drop-item': {
      id: '/mob-drop-item'
      path: '/mob-drop-item'
      fullPath: '/mob-drop-item'
      preLoaderRoute: typeof MobDropItemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group-group': {
      id: '/group-group'
      path: '/group-group'
      fullPath: '/group-group'
      preLoaderRoute: typeof GroupGroupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group': {
      id: '/group'
      path: '/group'
      fullPath: '/group'
      preLoaderRoute: typeof GroupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blend': {
      id: '/blend'
      path: '/blend'
      fullPath: '/blend'
      preLoaderRoute: typeof BlendRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlendRoute: BlendRoute,
  GroupRoute: GroupRoute,
  GroupGroupRoute: GroupGroupRoute,
  MobDropItemRoute: MobDropItemRoute,
  SpecialItemGroupRoute: SpecialItemGroupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
